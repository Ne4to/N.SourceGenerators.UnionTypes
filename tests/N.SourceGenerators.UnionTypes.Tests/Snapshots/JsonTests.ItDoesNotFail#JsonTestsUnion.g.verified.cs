//HintName: JsonTestsUnion.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
[JsonTestsUnionJsonConverter]
partial class JsonTestsUnion : System.IEquatable<JsonTestsUnion>
{
    private readonly int _variantId;
    private const int JsonTestsFooJId = 1;
    private readonly global::JsonTestsFooJ _jsonTestsFooJ;
    public bool IsJsonTestsFooJ => _variantId == JsonTestsFooJId;
    public global::JsonTestsFooJ AsJsonTestsFooJ
    {
        get
        {
            if (_variantId == JsonTestsFooJId)
                return _jsonTestsFooJ;
            throw new System.InvalidOperationException("Inner value is not JsonTestsFooJ");
        }
    }

    public JsonTestsUnion(global::JsonTestsFooJ jsonTestsFooJ)
    {
        System.ArgumentNullException.ThrowIfNull(jsonTestsFooJ);
        _variantId = JsonTestsFooJId;
        _jsonTestsFooJ = jsonTestsFooJ;
    }

    public static implicit operator JsonTestsUnion(global::JsonTestsFooJ jsonTestsFooJ) => new JsonTestsUnion(jsonTestsFooJ);
    public static explicit operator global::JsonTestsFooJ(JsonTestsUnion value)
    {
        if (value._variantId == JsonTestsFooJId)
            return value._jsonTestsFooJ;
        throw new System.InvalidOperationException("Inner value is not JsonTestsFooJ");
    }

    public bool TryGetJsonTestsFooJ([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::JsonTestsFooJ value)
    {
        if (_variantId == JsonTestsFooJId)
        {
            value = _jsonTestsFooJ;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private const int JsonTestsBarJId = 2;
    private readonly global::JsonTestsBarJ _jsonTestsBarJ;
    public bool IsJsonTestsBarJ => _variantId == JsonTestsBarJId;
    public global::JsonTestsBarJ AsJsonTestsBarJ
    {
        get
        {
            if (_variantId == JsonTestsBarJId)
                return _jsonTestsBarJ;
            throw new System.InvalidOperationException("Inner value is not JsonTestsBarJ");
        }
    }

    public JsonTestsUnion(global::JsonTestsBarJ jsonTestsBarJ)
    {
        System.ArgumentNullException.ThrowIfNull(jsonTestsBarJ);
        _variantId = JsonTestsBarJId;
        _jsonTestsBarJ = jsonTestsBarJ;
    }

    public static implicit operator JsonTestsUnion(global::JsonTestsBarJ jsonTestsBarJ) => new JsonTestsUnion(jsonTestsBarJ);
    public static explicit operator global::JsonTestsBarJ(JsonTestsUnion value)
    {
        if (value._variantId == JsonTestsBarJId)
            return value._jsonTestsBarJ;
        throw new System.InvalidOperationException("Inner value is not JsonTestsBarJ");
    }

    public bool TryGetJsonTestsBarJ([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::JsonTestsBarJ value)
    {
        if (_variantId == JsonTestsBarJId)
        {
            value = _jsonTestsBarJ;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    public TOut Match<TOut>(global::System.Func<global::JsonTestsFooJ, TOut> matchJsonTestsFooJ, global::System.Func<global::JsonTestsBarJ, TOut> matchJsonTestsBarJ)
    {
        if (_variantId == JsonTestsFooJId)
            return matchJsonTestsFooJ(_jsonTestsFooJ);
        if (_variantId == JsonTestsBarJId)
            return matchJsonTestsBarJ(_jsonTestsBarJ);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task<TOut> MatchAsync<TOut>(global::System.Func<global::JsonTestsFooJ, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchJsonTestsFooJ, global::System.Func<global::JsonTestsBarJ, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchJsonTestsBarJ, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == JsonTestsFooJId)
            return await matchJsonTestsFooJ(_jsonTestsFooJ, ct).ConfigureAwait(false);
        if (_variantId == JsonTestsBarJId)
            return await matchJsonTestsBarJ(_jsonTestsBarJ, ct).ConfigureAwait(false);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public void Switch(global::System.Action<global::JsonTestsFooJ> switchJsonTestsFooJ, global::System.Action<global::JsonTestsBarJ> switchJsonTestsBarJ)
    {
        if (_variantId == JsonTestsFooJId)
        {
            switchJsonTestsFooJ(_jsonTestsFooJ);
            return;
        }

        if (_variantId == JsonTestsBarJId)
        {
            switchJsonTestsBarJ(_jsonTestsBarJ);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task SwitchAsync(global::System.Func<global::JsonTestsFooJ, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchJsonTestsFooJ, global::System.Func<global::JsonTestsBarJ, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchJsonTestsBarJ, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == JsonTestsFooJId)
        {
            await switchJsonTestsFooJ(_jsonTestsFooJ, ct).ConfigureAwait(false);
            return;
        }

        if (_variantId == JsonTestsBarJId)
        {
            await switchJsonTestsBarJ(_jsonTestsBarJ, ct).ConfigureAwait(false);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public global::System.Type ValueType
    {
        get
        {
            if (_variantId == JsonTestsFooJId)
                return typeof(global::JsonTestsFooJ);
            if (_variantId == JsonTestsBarJId)
                return typeof(global::JsonTestsBarJ);
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    public override int GetHashCode()
    {
        if (_variantId == JsonTestsFooJId)
            return _jsonTestsFooJ.GetHashCode();
        if (_variantId == JsonTestsBarJId)
            return _jsonTestsBarJ.GetHashCode();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public static bool operator ==(JsonTestsUnion? left, JsonTestsUnion? right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(JsonTestsUnion? left, JsonTestsUnion? right)
    {
        return !Equals(left, right);
    }

    public bool Equals(JsonTestsUnion? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (ValueType != other.ValueType)
        {
            return false;
        }

        if (_variantId == JsonTestsFooJId)
            return System.Collections.Generic.EqualityComparer<global::JsonTestsFooJ>.Default.Equals(_jsonTestsFooJ, other._jsonTestsFooJ);
        if (_variantId == JsonTestsBarJId)
            return System.Collections.Generic.EqualityComparer<global::JsonTestsBarJ>.Default.Equals(_jsonTestsBarJ, other._jsonTestsBarJ);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override string ToString()
    {
        if (_variantId == JsonTestsFooJId)
            return _jsonTestsFooJ.ToString();
        if (_variantId == JsonTestsBarJId)
            return _jsonTestsBarJ.ToString();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override bool Equals(object? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (other.GetType() != typeof(JsonTestsUnion))
        {
            return false;
        }

        return Equals((JsonTestsUnion)other);
    }
}