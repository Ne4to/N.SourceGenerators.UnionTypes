//HintName: GenericResultNullableOfT.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
partial class GenericResultNullable<T> : System.IEquatable<GenericResultNullable<T>>
{
    private readonly int _variantId;
    private const int ValueId = 1;
    private readonly T _value;
    public bool IsValue => _variantId == ValueId;
    public T AsValue
    {
        get
        {
            if (_variantId == ValueId)
                return _value;
            throw new System.InvalidOperationException($"Unable convert to Value. Inner value is {ValueAlias} not Value.");
        }
    }

    public GenericResultNullable(T value)
    {
        _variantId = ValueId;
        _value = value;
    }

    public static implicit operator GenericResultNullable<T>(T value) => new GenericResultNullable<T>(value);
    public static explicit operator T(GenericResultNullable<T> value)
    {
        if (value._variantId == ValueId)
            return value._value;
        throw new System.InvalidOperationException($"Unable convert to Value. Inner value is {value.ValueAlias} not Value.");
    }

    public bool TryGetValue(out T value)
    {
        if (_variantId == ValueId)
        {
            value = _value;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private const int StatusId = 2;
    private readonly string _status;
    public bool IsStatus => _variantId == StatusId;
    public string AsStatus
    {
        get
        {
            if (_variantId == StatusId)
                return _status;
            throw new System.InvalidOperationException($"Unable convert to Status. Inner value is {ValueAlias} not Status.");
        }
    }

    public GenericResultNullable(string status)
    {
        _variantId = StatusId;
        _status = status;
    }

    public static implicit operator GenericResultNullable<T>(string status) => new GenericResultNullable<T>(status);
    public static explicit operator string(GenericResultNullable<T> value)
    {
        if (value._variantId == StatusId)
            return value._status;
        throw new System.InvalidOperationException($"Unable convert to Status. Inner value is {value.ValueAlias} not Status.");
    }

    public bool TryGetStatus(out string value)
    {
        if (_variantId == StatusId)
        {
            value = _status;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    public TOut Match<TOut>(global::System.Func<T, TOut> matchValue, global::System.Func<string, TOut> matchStatus)
    {
        if (_variantId == ValueId)
            return matchValue(_value);
        if (_variantId == StatusId)
            return matchStatus(_status);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task<TOut> MatchAsync<TOut>(global::System.Func<T, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchValue, global::System.Func<string, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchStatus, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == ValueId)
            return await matchValue(_value, ct).ConfigureAwait(false);
        if (_variantId == StatusId)
            return await matchStatus(_status, ct).ConfigureAwait(false);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public void Switch(global::System.Action<T> switchValue, global::System.Action<string> switchStatus)
    {
        if (_variantId == ValueId)
        {
            switchValue(_value);
            return;
        }

        if (_variantId == StatusId)
        {
            switchStatus(_status);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task SwitchAsync(global::System.Func<T, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchValue, global::System.Func<string, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchStatus, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == ValueId)
        {
            await switchValue(_value, ct).ConfigureAwait(false);
            return;
        }

        if (_variantId == StatusId)
        {
            await switchStatus(_status, ct).ConfigureAwait(false);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public global::System.Type ValueType
    {
        get
        {
            if (_variantId == ValueId)
                return typeof(T);
            if (_variantId == StatusId)
                return typeof(string);
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    private string ValueAlias
    {
        get
        {
            if (_variantId == ValueId)
                return "Value";
            if (_variantId == StatusId)
                return "Status";
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    public override int GetHashCode()
    {
        if (_variantId == ValueId)
            return _value.GetHashCode();
        if (_variantId == StatusId)
            return _status.GetHashCode();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public static bool operator ==(GenericResultNullable<T>? left, GenericResultNullable<T>? right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(GenericResultNullable<T>? left, GenericResultNullable<T>? right)
    {
        return !Equals(left, right);
    }

    public bool Equals(GenericResultNullable<T>? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (ValueType != other.ValueType)
        {
            return false;
        }

        if (_variantId == ValueId)
            return System.Collections.Generic.EqualityComparer<T>.Default.Equals(_value, other._value);
        if (_variantId == StatusId)
            return System.Collections.Generic.EqualityComparer<string>.Default.Equals(_status, other._status);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override string ToString()
    {
        if (_variantId == ValueId)
            return _value.ToString();
        if (_variantId == StatusId)
            return _status.ToString();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override bool Equals(object? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (other.GetType() != typeof(GenericResultNullable<T>))
        {
            return false;
        }

        return Equals((GenericResultNullable<T>)other);
    }
}