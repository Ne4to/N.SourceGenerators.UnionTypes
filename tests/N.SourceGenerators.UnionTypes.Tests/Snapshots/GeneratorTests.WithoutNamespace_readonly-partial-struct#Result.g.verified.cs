//HintName: Result.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
partial struct Result : System.IEquatable<Result>
{
    private readonly int _variantId;
    private const int SuccessId = 1;
    private readonly global::Success _success;
    public bool IsSuccess => _variantId == SuccessId;
    public global::Success AsSuccess
    {
        get
        {
            if (_variantId == SuccessId)
                return _success;
            throw new System.InvalidOperationException($"Unable convert to Success. Inner value is {ValueAlias} not Success.");
        }
    }

    public Result(global::Success success)
    {
        System.ArgumentNullException.ThrowIfNull(success);
        _variantId = SuccessId;
        _success = success;
    }

    public static implicit operator Result(global::Success success) => new Result(success);
    public static explicit operator global::Success(Result value)
    {
        if (value._variantId == SuccessId)
            return value._success;
        throw new System.InvalidOperationException($"Unable convert to Success. Inner value is {value.ValueAlias} not Success.");
    }

    public bool TryGetSuccess([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Success value)
    {
        if (_variantId == SuccessId)
        {
            value = _success;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private const int ErrorId = 2;
    private readonly global::Error _error;
    public bool IsError => _variantId == ErrorId;
    public global::Error AsError
    {
        get
        {
            if (_variantId == ErrorId)
                return _error;
            throw new System.InvalidOperationException($"Unable convert to Error. Inner value is {ValueAlias} not Error.");
        }
    }

    public Result(global::Error @error)
    {
        System.ArgumentNullException.ThrowIfNull(@error);
        _variantId = ErrorId;
        _error = @error;
    }

    public static implicit operator Result(global::Error @error) => new Result(@error);
    public static explicit operator global::Error(Result value)
    {
        if (value._variantId == ErrorId)
            return value._error;
        throw new System.InvalidOperationException($"Unable convert to Error. Inner value is {value.ValueAlias} not Error.");
    }

    public bool TryGetError([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Error value)
    {
        if (_variantId == ErrorId)
        {
            value = _error;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private const int WrappedOfIReadOnlyListOfStringId = 3;
    private readonly global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>> _wrappedOfIReadOnlyListOfString;
    public bool IsWrappedOfIReadOnlyListOfString => _variantId == WrappedOfIReadOnlyListOfStringId;
    public global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>> AsWrappedOfIReadOnlyListOfString
    {
        get
        {
            if (_variantId == WrappedOfIReadOnlyListOfStringId)
                return _wrappedOfIReadOnlyListOfString;
            throw new System.InvalidOperationException($"Unable convert to WrappedOfIReadOnlyListOfString. Inner value is {ValueAlias} not WrappedOfIReadOnlyListOfString.");
        }
    }

    public Result(global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>> wrappedOfIReadOnlyListOfString)
    {
        System.ArgumentNullException.ThrowIfNull(wrappedOfIReadOnlyListOfString);
        _variantId = WrappedOfIReadOnlyListOfStringId;
        _wrappedOfIReadOnlyListOfString = wrappedOfIReadOnlyListOfString;
    }

    public static implicit operator Result(global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>> wrappedOfIReadOnlyListOfString) => new Result(wrappedOfIReadOnlyListOfString);
    public static explicit operator global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>>(Result value)
    {
        if (value._variantId == WrappedOfIReadOnlyListOfStringId)
            return value._wrappedOfIReadOnlyListOfString;
        throw new System.InvalidOperationException($"Unable convert to WrappedOfIReadOnlyListOfString. Inner value is {value.ValueAlias} not WrappedOfIReadOnlyListOfString.");
    }

    public bool TryGetWrappedOfIReadOnlyListOfString([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>> value)
    {
        if (_variantId == WrappedOfIReadOnlyListOfStringId)
        {
            value = _wrappedOfIReadOnlyListOfString;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    public TOut Match<TOut>(global::System.Func<global::Success, TOut> matchSuccess, global::System.Func<global::Error, TOut> matchError, global::System.Func<global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>>, TOut> matchWrappedOfIReadOnlyListOfString)
    {
        if (_variantId == SuccessId)
            return matchSuccess(_success);
        if (_variantId == ErrorId)
            return matchError(_error);
        if (_variantId == WrappedOfIReadOnlyListOfStringId)
            return matchWrappedOfIReadOnlyListOfString(_wrappedOfIReadOnlyListOfString);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task<TOut> MatchAsync<TOut>(global::System.Func<global::Success, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchSuccess, global::System.Func<global::Error, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchError, global::System.Func<global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>>, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchWrappedOfIReadOnlyListOfString, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == SuccessId)
            return await matchSuccess(_success, ct).ConfigureAwait(false);
        if (_variantId == ErrorId)
            return await matchError(_error, ct).ConfigureAwait(false);
        if (_variantId == WrappedOfIReadOnlyListOfStringId)
            return await matchWrappedOfIReadOnlyListOfString(_wrappedOfIReadOnlyListOfString, ct).ConfigureAwait(false);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public void Switch(global::System.Action<global::Success> switchSuccess, global::System.Action<global::Error> switchError, global::System.Action<global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>>> switchWrappedOfIReadOnlyListOfString)
    {
        if (_variantId == SuccessId)
        {
            switchSuccess(_success);
            return;
        }

        if (_variantId == ErrorId)
        {
            switchError(_error);
            return;
        }

        if (_variantId == WrappedOfIReadOnlyListOfStringId)
        {
            switchWrappedOfIReadOnlyListOfString(_wrappedOfIReadOnlyListOfString);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task SwitchAsync(global::System.Func<global::Success, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchSuccess, global::System.Func<global::Error, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchError, global::System.Func<global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>>, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchWrappedOfIReadOnlyListOfString, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == SuccessId)
        {
            await switchSuccess(_success, ct).ConfigureAwait(false);
            return;
        }

        if (_variantId == ErrorId)
        {
            await switchError(_error, ct).ConfigureAwait(false);
            return;
        }

        if (_variantId == WrappedOfIReadOnlyListOfStringId)
        {
            await switchWrappedOfIReadOnlyListOfString(_wrappedOfIReadOnlyListOfString, ct).ConfigureAwait(false);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public global::System.Type ValueType
    {
        get
        {
            if (_variantId == SuccessId)
                return typeof(global::Success);
            if (_variantId == ErrorId)
                return typeof(global::Error);
            if (_variantId == WrappedOfIReadOnlyListOfStringId)
                return typeof(global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>>);
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    private string ValueAlias
    {
        get
        {
            if (_variantId == SuccessId)
                return "Success";
            if (_variantId == ErrorId)
                return "Error";
            if (_variantId == WrappedOfIReadOnlyListOfStringId)
                return "WrappedOfIReadOnlyListOfString";
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    public override int GetHashCode()
    {
        if (_variantId == SuccessId)
            return _success.GetHashCode();
        if (_variantId == ErrorId)
            return _error.GetHashCode();
        if (_variantId == WrappedOfIReadOnlyListOfStringId)
            return _wrappedOfIReadOnlyListOfString.GetHashCode();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public static bool operator ==(Result left, Result right)
    {
        return left.Equals(right);
    }

    public static bool operator !=(Result left, Result right)
    {
        return !left.Equals(right);
    }

    public bool Equals(Result other)
    {
        if (ValueType != other.ValueType)
        {
            return false;
        }

        if (_variantId == SuccessId)
            return System.Collections.Generic.EqualityComparer<global::Success>.Default.Equals(_success, other._success);
        if (_variantId == ErrorId)
            return System.Collections.Generic.EqualityComparer<global::Error>.Default.Equals(_error, other._error);
        if (_variantId == WrappedOfIReadOnlyListOfStringId)
            return System.Collections.Generic.EqualityComparer<global::Wrapped<global::System.Collections.Generic.IReadOnlyList<string>>>.Default.Equals(_wrappedOfIReadOnlyListOfString, other._wrappedOfIReadOnlyListOfString);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override string ToString()
    {
        if (_variantId == SuccessId)
            return _success.ToString();
        if (_variantId == ErrorId)
            return _error.ToString();
        if (_variantId == WrappedOfIReadOnlyListOfStringId)
            return _wrappedOfIReadOnlyListOfString.ToString();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override bool Equals(object? obj)
    {
        return obj is Result other && Equals(other);
    }
}