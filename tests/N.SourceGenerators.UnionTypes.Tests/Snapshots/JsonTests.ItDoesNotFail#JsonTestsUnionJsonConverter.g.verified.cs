//HintName: JsonTestsUnionJsonConverter.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
internal class JsonTestsUnionJsonConverter : System.Text.Json.Serialization.JsonConverter<JsonTestsUnion>
{
    private static object? GetDiscriminator(object x)
    {
        if (x is global::JsonTestsFooJ)
        {
            return "Foo";
        }

        if (x is global::JsonTestsBarJ)
        {
            return "Bar";
        }

        throw new System.ArgumentOutOfRangeException(nameof(x), x, $"{x.GetType()} has no discriminator specified in {typeof(global::JsonTestsUnion)}");
    }

    private static void AddDiscriminatorModifier(System.Text.Json.Serialization.Metadata.JsonTypeInfo jsonTypeInfo)
    {
        if (jsonTypeInfo.Kind != System.Text.Json.Serialization.Metadata.JsonTypeInfoKind.Object)
            return;
        System.Text.Json.Serialization.Metadata.JsonPropertyInfo jsonPropertyInfo = jsonTypeInfo.CreateJsonPropertyInfo(typeof(string), "$type");
        jsonPropertyInfo.Get = GetDiscriminator;
        jsonTypeInfo.Properties.Insert(0, jsonPropertyInfo);
    }

    private static System.Type GetSubType(ref System.Text.Json.Utf8JsonReader reader)
    {
        if (reader.TokenType != System.Text.Json.JsonTokenType.String)
        {
            throw new System.Text.Json.JsonException($"Expected string discriminator value, got {reader.TokenType}");
        }

        if (reader.ValueTextEquals("Foo"u8))
        {
            return typeof(global::JsonTestsFooJ);
        }

        if (reader.ValueTextEquals("Bar"u8))
        {
            return typeof(global::JsonTestsBarJ);
        }

        throw new System.Text.Json.JsonException($"{reader.GetString()} is not a valid discriminator value");
    }

    public override global::JsonTestsUnion Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
    {
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override void Write(System.Text.Json.Utf8JsonWriter writer, global::JsonTestsUnion value, System.Text.Json.JsonSerializerOptions options)
    {
        var customOptions = new System.Text.Json.JsonSerializerOptions(options)
        {TypeInfoResolver = new System.Text.Json.Serialization.Metadata.DefaultJsonTypeInfoResolver{Modifiers = {AddDiscriminatorModifier}}};
        value.Switch(x => System.Text.Json.JsonSerializer.Serialize(writer, x, customOptions), x => System.Text.Json.JsonSerializer.Serialize(writer, x, customOptions));
    }
}