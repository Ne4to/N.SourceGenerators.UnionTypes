//HintName: OperationDataResultOfTAndTError.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
partial class OperationDataResult<T, TError> : System.IEquatable<OperationDataResult<T, TError>>
{
    private readonly int _variantId;
    private const int ResultId = 1;
    private readonly T _result;
    public bool IsResult => _variantId == ResultId;
    public T AsResult
    {
        get
        {
            if (_variantId == ResultId)
                return _result;
            throw new System.InvalidOperationException("Inner value is not Result");
        }
    }

    public OperationDataResult(T result)
    {
        System.ArgumentNullException.ThrowIfNull(result);
        _variantId = ResultId;
        _result = result;
    }

    public static implicit operator OperationDataResult<T, TError>(T result) => new OperationDataResult<T, TError>(result);
    public static explicit operator T(OperationDataResult<T, TError> value)
    {
        if (value._variantId == ResultId)
            return value._result;
        throw new System.InvalidOperationException("Inner value is not Result");
    }

    public bool TryGetResult([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out T value)
    {
        if (_variantId == ResultId)
        {
            value = _result;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private const int ErrorId = 2;
    private readonly TError _error;
    public bool IsError => _variantId == ErrorId;
    public TError AsError
    {
        get
        {
            if (_variantId == ErrorId)
                return _error;
            throw new System.InvalidOperationException("Inner value is not Error");
        }
    }

    public OperationDataResult(TError @error)
    {
        System.ArgumentNullException.ThrowIfNull(@error);
        _variantId = ErrorId;
        _error = @error;
    }

    public static implicit operator OperationDataResult<T, TError>(TError @error) => new OperationDataResult<T, TError>(@error);
    public static explicit operator TError(OperationDataResult<T, TError> value)
    {
        if (value._variantId == ErrorId)
            return value._error;
        throw new System.InvalidOperationException("Inner value is not Error");
    }

    public bool TryGetError([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TError value)
    {
        if (_variantId == ErrorId)
        {
            value = _error;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    public TOut Match<TOut>(global::System.Func<T, TOut> matchResult, global::System.Func<TError, TOut> matchError)
    {
        if (_variantId == ResultId)
            return matchResult(_result);
        if (_variantId == ErrorId)
            return matchError(_error);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task<TOut> MatchAsync<TOut>(global::System.Func<T, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchResult, global::System.Func<TError, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchError, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == ResultId)
            return await matchResult(_result, ct).ConfigureAwait(false);
        if (_variantId == ErrorId)
            return await matchError(_error, ct).ConfigureAwait(false);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public void Switch(global::System.Action<T> switchResult, global::System.Action<TError> switchError)
    {
        if (_variantId == ResultId)
        {
            switchResult(_result);
            return;
        }

        if (_variantId == ErrorId)
        {
            switchError(_error);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task SwitchAsync(global::System.Func<T, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchResult, global::System.Func<TError, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchError, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == ResultId)
        {
            await switchResult(_result, ct).ConfigureAwait(false);
            return;
        }

        if (_variantId == ErrorId)
        {
            await switchError(_error, ct).ConfigureAwait(false);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public global::System.Type ValueType
    {
        get
        {
            if (_variantId == ResultId)
                return typeof(T);
            if (_variantId == ErrorId)
                return typeof(TError);
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    public override int GetHashCode()
    {
        if (_variantId == ResultId)
            return _result.GetHashCode();
        if (_variantId == ErrorId)
            return _error.GetHashCode();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public static bool operator ==(OperationDataResult<T, TError>? left, OperationDataResult<T, TError>? right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(OperationDataResult<T, TError>? left, OperationDataResult<T, TError>? right)
    {
        return !Equals(left, right);
    }

    public bool Equals(OperationDataResult<T, TError>? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (ValueType != other.ValueType)
        {
            return false;
        }

        if (_variantId == ResultId)
            return System.Collections.Generic.EqualityComparer<T>.Default.Equals(_result, other._result);
        if (_variantId == ErrorId)
            return System.Collections.Generic.EqualityComparer<TError>.Default.Equals(_error, other._error);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override string ToString()
    {
        if (_variantId == ResultId)
            return _result.ToString();
        if (_variantId == ErrorId)
            return _error.ToString();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override bool Equals(object? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (other.GetType() != typeof(OperationDataResult<T, TError>))
        {
            return false;
        }

        return Equals((OperationDataResult<T, TError>)other);
    }
}