//HintName: OperationDataResultOfTResultAndTError.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
partial class OperationDataResult<TResult, TError> : System.IEquatable<OperationDataResult<TResult, TError>>
{
    private readonly TResult? _result;
    public bool IsResult => _result != null;
    public TResult AsResult => _result ?? throw new System.InvalidOperationException("Inner value is not Result");
    public OperationDataResult(TResult result)
    {
        System.ArgumentNullException.ThrowIfNull(result);
        _result = result;
    }

    public static implicit operator OperationDataResult<TResult, TError>(TResult result) => new OperationDataResult<TResult, TError>(result);
    public static explicit operator TResult(OperationDataResult<TResult, TError> value) => value._result ?? throw new System.InvalidOperationException("Inner value is not Result");
    public bool TryGetResult([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TResult? value)
    {
        if (_result != null)
        {
            value = _result;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private readonly TError? _error;
    public bool IsError => _error != null;
    public TError AsError => _error ?? throw new System.InvalidOperationException("Inner value is not Error");
    public OperationDataResult(TError @error)
    {
        System.ArgumentNullException.ThrowIfNull(@error);
        _error = @error;
    }

    public static implicit operator OperationDataResult<TResult, TError>(TError @error) => new OperationDataResult<TResult, TError>(@error);
    public static explicit operator TError(OperationDataResult<TResult, TError> value) => value._error ?? throw new System.InvalidOperationException("Inner value is not Error");
    public bool TryGetError([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out TError? value)
    {
        if (_error != null)
        {
            value = _error;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private readonly int? _int32;
    public bool IsInt32 => _int32 != null;
    public int AsInt32 => _int32 ?? throw new System.InvalidOperationException("Inner value is not Int32");
    public OperationDataResult(int int32)
    {
        System.ArgumentNullException.ThrowIfNull(int32);
        _int32 = int32;
    }

    public static implicit operator OperationDataResult<TResult, TError>(int int32) => new OperationDataResult<TResult, TError>(int32);
    public static explicit operator int(OperationDataResult<TResult, TError> value) => value._int32 ?? throw new System.InvalidOperationException("Inner value is not Int32");
    public bool TryGetInt32([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out int? value)
    {
        if (_int32 != null)
        {
            value = _int32;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    public TOut Match<TOut>(global::System.Func<TResult, TOut> matchResult, global::System.Func<TError, TOut> matchError, global::System.Func<int, TOut> matchInt32)
    {
        if (_result != null)
            return matchResult(_result!);
        if (_error != null)
            return matchError(_error!);
        if (_int32 != null)
            return matchInt32(_int32.Value);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task<TOut> MatchAsync<TOut>(global::System.Func<TResult, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchResult, global::System.Func<TError, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchError, global::System.Func<int, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchInt32, global::System.Threading.CancellationToken ct)
    {
        if (_result != null)
            return await matchResult(_result!, ct).ConfigureAwait(false);
        if (_error != null)
            return await matchError(_error!, ct).ConfigureAwait(false);
        if (_int32 != null)
            return await matchInt32(_int32.Value, ct).ConfigureAwait(false);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public void Switch(global::System.Action<TResult> switchResult, global::System.Action<TError> switchError, global::System.Action<int> switchInt32)
    {
        if (_result != null)
        {
            switchResult(_result!);
            return;
        }

        if (_error != null)
        {
            switchError(_error!);
            return;
        }

        if (_int32 != null)
        {
            switchInt32(_int32.Value);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task SwitchAsync(global::System.Func<TResult, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchResult, global::System.Func<TError, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchError, global::System.Func<int, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchInt32, global::System.Threading.CancellationToken ct)
    {
        if (_result != null)
        {
            await switchResult(_result!, ct).ConfigureAwait(false);
            return;
        }

        if (_error != null)
        {
            await switchError(_error!, ct).ConfigureAwait(false);
            return;
        }

        if (_int32 != null)
        {
            await switchInt32(_int32.Value, ct).ConfigureAwait(false);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public global::System.Type ValueType
    {
        get
        {
            if (_result != null)
                return typeof(TResult);
            if (_error != null)
                return typeof(TError);
            if (_int32 != null)
                return typeof(int);
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    public override int GetHashCode()
    {
        if (_result != null)
            return _result.GetHashCode();
        if (_error != null)
            return _error.GetHashCode();
        if (_int32 != null)
            return _int32.GetHashCode();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public static bool operator ==(OperationDataResult<TResult, TError>? left, OperationDataResult<TResult, TError>? right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(OperationDataResult<TResult, TError>? left, OperationDataResult<TResult, TError>? right)
    {
        return !Equals(left, right);
    }

    public bool Equals(OperationDataResult<TResult, TError>? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (ValueType != other.ValueType)
        {
            return false;
        }

        if (_result != null)
            return System.Collections.Generic.EqualityComparer<TResult>.Default.Equals(_result!, other._result);
        if (_error != null)
            return System.Collections.Generic.EqualityComparer<TError>.Default.Equals(_error!, other._error);
        if (_int32 != null)
            return System.Collections.Generic.EqualityComparer<int>.Default.Equals(_int32.Value, other._int32.Value);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override string ToString()
    {
        if (_result != null)
            return _result.ToString();
        if (_error != null)
            return _error.ToString();
        if (_int32 != null)
            return _int32.ToString();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override bool Equals(object? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (other.GetType() != typeof(OperationDataResult<TResult, TError>))
        {
            return false;
        }

        return Equals((OperationDataResult<TResult, TError>)other);
    }
}