//HintName: Result.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
namespace MyApp
{
    partial class Result : IEquatable<Result>
    {
        private readonly global::MyApp.Success? _success;
        public bool IsSuccess => _success != null;
        public global::MyApp.Success AsSuccess => _success ?? throw new InvalidOperationException("Inner value is not Success");
        public Result(global::MyApp.Success Success)
        {
            System.ArgumentNullException.ThrowIfNull(Success);
            _success = Success;
        }

        public static implicit operator Result(global::MyApp.Success Success) => new Result(Success);
        public static explicit operator global::MyApp.Success(Result value) => value._success ?? throw new InvalidOperationException("Inner value is not Success");
        public bool TryGetSuccess([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::MyApp.Success? value)
        {
            if (_success != null)
            {
                value = _success;
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }

        private readonly global::MyApp.Error? _error;
        public bool IsError => _error != null;
        public global::MyApp.Error AsError => _error ?? throw new InvalidOperationException("Inner value is not Error");
        public Result(global::MyApp.Error Error)
        {
            System.ArgumentNullException.ThrowIfNull(Error);
            _error = Error;
        }

        public static implicit operator Result(global::MyApp.Error Error) => new Result(Error);
        public static explicit operator global::MyApp.Error(Result value) => value._error ?? throw new InvalidOperationException("Inner value is not Error");
        public bool TryGetError([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::MyApp.Error? value)
        {
            if (_error != null)
            {
                value = _error;
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }

        private readonly global::System.Collections.Generic.IReadOnlyList<int>? _iReadOnlyListOfInt;
        public bool IsIReadOnlyListOfInt => _iReadOnlyListOfInt != null;
        public global::System.Collections.Generic.IReadOnlyList<int> AsIReadOnlyListOfInt => _iReadOnlyListOfInt ?? throw new InvalidOperationException("Inner value is not IReadOnlyListOfInt");
        public Result(global::System.Collections.Generic.IReadOnlyList<int> IReadOnlyListOfInt)
        {
            System.ArgumentNullException.ThrowIfNull(IReadOnlyListOfInt);
            _iReadOnlyListOfInt = IReadOnlyListOfInt;
        }

        public static implicit operator Result(global::System.Collections.Generic.IReadOnlyList<int> IReadOnlyListOfInt) => new Result(IReadOnlyListOfInt);
        public static explicit operator global::System.Collections.Generic.IReadOnlyList<int>(Result value) => value._iReadOnlyListOfInt ?? throw new InvalidOperationException("Inner value is not IReadOnlyListOfInt");
        public bool TryGetIReadOnlyListOfInt([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::System.Collections.Generic.IReadOnlyList<int>? value)
        {
            if (_iReadOnlyListOfInt != null)
            {
                value = _iReadOnlyListOfInt;
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }

        private readonly string[]? _arrayOfString;
        public bool IsArrayOfString => _arrayOfString != null;
        public string[] AsArrayOfString => _arrayOfString ?? throw new InvalidOperationException("Inner value is not ArrayOfString");
        public Result(string[] ArrayOfString)
        {
            System.ArgumentNullException.ThrowIfNull(ArrayOfString);
            _arrayOfString = ArrayOfString;
        }

        public static implicit operator Result(string[] ArrayOfString) => new Result(ArrayOfString);
        public static explicit operator string[](Result value) => value._arrayOfString ?? throw new InvalidOperationException("Inner value is not ArrayOfString");
        public bool TryGetArrayOfString([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out string[]? value)
        {
            if (_arrayOfString != null)
            {
                value = _arrayOfString;
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }

        private readonly global::System.Tuple<int, string>? _tupleOfIntAndString;
        public bool IsTupleOfIntAndString => _tupleOfIntAndString != null;
        public global::System.Tuple<int, string> AsTupleOfIntAndString => _tupleOfIntAndString ?? throw new InvalidOperationException("Inner value is not TupleOfIntAndString");
        public Result(global::System.Tuple<int, string> TupleOfIntAndString)
        {
            System.ArgumentNullException.ThrowIfNull(TupleOfIntAndString);
            _tupleOfIntAndString = TupleOfIntAndString;
        }

        public static implicit operator Result(global::System.Tuple<int, string> TupleOfIntAndString) => new Result(TupleOfIntAndString);
        public static explicit operator global::System.Tuple<int, string>(Result value) => value._tupleOfIntAndString ?? throw new InvalidOperationException("Inner value is not TupleOfIntAndString");
        public bool TryGetTupleOfIntAndString([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out global::System.Tuple<int, string>? value)
        {
            if (_tupleOfIntAndString != null)
            {
                value = _tupleOfIntAndString;
                return true;
            }
            else
            {
                value = default;
                return false;
            }
        }

        public TOut Match<TOut>(global::System.Func<global::MyApp.Success, TOut> matchSuccess, global::System.Func<global::MyApp.Error, TOut> matchError, global::System.Func<global::System.Collections.Generic.IReadOnlyList<int>, TOut> matchIReadOnlyListOfInt, global::System.Func<string[], TOut> matchArrayOfString, global::System.Func<global::System.Tuple<int, string>, TOut> matchTupleOfIntAndString)
        {
            if (_success != null)
                return matchSuccess(_success);
            if (_error != null)
                return matchError(_error);
            if (_iReadOnlyListOfInt != null)
                return matchIReadOnlyListOfInt(_iReadOnlyListOfInt);
            if (_arrayOfString != null)
                return matchArrayOfString(_arrayOfString);
            if (_tupleOfIntAndString != null)
                return matchTupleOfIntAndString(_tupleOfIntAndString);
            throw new InvalidOperationException("Inner type is unknown");
        }

        public async global::System.Threading.Tasks.Task<TOut> MatchAsync<TOut>(global::System.Func<global::MyApp.Success, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchSuccess, global::System.Func<global::MyApp.Error, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchError, global::System.Func<global::System.Collections.Generic.IReadOnlyList<int>, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchIReadOnlyListOfInt, global::System.Func<string[], global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchArrayOfString, global::System.Func<global::System.Tuple<int, string>, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchTupleOfIntAndString, global::System.Threading.CancellationToken ct)
        {
            if (_success != null)
                return await matchSuccess(_success, ct).ConfigureAwait(false);
            if (_error != null)
                return await matchError(_error, ct).ConfigureAwait(false);
            if (_iReadOnlyListOfInt != null)
                return await matchIReadOnlyListOfInt(_iReadOnlyListOfInt, ct).ConfigureAwait(false);
            if (_arrayOfString != null)
                return await matchArrayOfString(_arrayOfString, ct).ConfigureAwait(false);
            if (_tupleOfIntAndString != null)
                return await matchTupleOfIntAndString(_tupleOfIntAndString, ct).ConfigureAwait(false);
            throw new InvalidOperationException("Inner type is unknown");
        }

        public void Switch(global::System.Action<global::MyApp.Success> switchSuccess, global::System.Action<global::MyApp.Error> switchError, global::System.Action<global::System.Collections.Generic.IReadOnlyList<int>> switchIReadOnlyListOfInt, global::System.Action<string[]> switchArrayOfString, global::System.Action<global::System.Tuple<int, string>> switchTupleOfIntAndString)
        {
            if (_success != null)
            {
                switchSuccess(_success);
                return;
            }

            if (_error != null)
            {
                switchError(_error);
                return;
            }

            if (_iReadOnlyListOfInt != null)
            {
                switchIReadOnlyListOfInt(_iReadOnlyListOfInt);
                return;
            }

            if (_arrayOfString != null)
            {
                switchArrayOfString(_arrayOfString);
                return;
            }

            if (_tupleOfIntAndString != null)
            {
                switchTupleOfIntAndString(_tupleOfIntAndString);
                return;
            }

            throw new InvalidOperationException("Inner type is unknown");
        }

        public async global::System.Threading.Tasks.Task SwitchAsync(global::System.Func<global::MyApp.Success, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchSuccess, global::System.Func<global::MyApp.Error, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchError, global::System.Func<global::System.Collections.Generic.IReadOnlyList<int>, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchIReadOnlyListOfInt, global::System.Func<string[], global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchArrayOfString, global::System.Func<global::System.Tuple<int, string>, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchTupleOfIntAndString, global::System.Threading.CancellationToken ct)
        {
            if (_success != null)
            {
                await switchSuccess(_success, ct).ConfigureAwait(false);
                return;
            }

            if (_error != null)
            {
                await switchError(_error, ct).ConfigureAwait(false);
                return;
            }

            if (_iReadOnlyListOfInt != null)
            {
                await switchIReadOnlyListOfInt(_iReadOnlyListOfInt, ct).ConfigureAwait(false);
                return;
            }

            if (_arrayOfString != null)
            {
                await switchArrayOfString(_arrayOfString, ct).ConfigureAwait(false);
                return;
            }

            if (_tupleOfIntAndString != null)
            {
                await switchTupleOfIntAndString(_tupleOfIntAndString, ct).ConfigureAwait(false);
                return;
            }

            throw new InvalidOperationException("Inner type is unknown");
        }

        public global::System.Type ValueType
        {
            get
            {
                if (_success != null)
                    return typeof(global::MyApp.Success);
                if (_error != null)
                    return typeof(global::MyApp.Error);
                if (_iReadOnlyListOfInt != null)
                    return typeof(global::System.Collections.Generic.IReadOnlyList<int>);
                if (_arrayOfString != null)
                    return typeof(string[]);
                if (_tupleOfIntAndString != null)
                    return typeof(global::System.Tuple<int, string>);
                throw new InvalidOperationException("Inner type is unknown");
            }
        }

        public override int GetHashCode()
        {
            if (_success != null)
                return _success.GetHashCode();
            if (_error != null)
                return _error.GetHashCode();
            if (_iReadOnlyListOfInt != null)
                return _iReadOnlyListOfInt.GetHashCode();
            if (_arrayOfString != null)
                return _arrayOfString.GetHashCode();
            if (_tupleOfIntAndString != null)
                return _tupleOfIntAndString.GetHashCode();
            throw new InvalidOperationException("Inner type is unknown");
        }

        public static bool operator ==(Result? left, Result? right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Result? left, Result? right)
        {
            return !Equals(left, right);
        }

        public bool Equals(Result? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (ValueType != other.ValueType)
            {
                return false;
            }

            if (_success != null)
                return EqualityComparer<global::MyApp.Success>.Default.Equals(_success, other._success);
            if (_error != null)
                return EqualityComparer<global::MyApp.Error>.Default.Equals(_error, other._error);
            if (_iReadOnlyListOfInt != null)
                return EqualityComparer<global::System.Collections.Generic.IReadOnlyList<int>>.Default.Equals(_iReadOnlyListOfInt, other._iReadOnlyListOfInt);
            if (_arrayOfString != null)
                return EqualityComparer<string[]>.Default.Equals(_arrayOfString, other._arrayOfString);
            if (_tupleOfIntAndString != null)
                return EqualityComparer<global::System.Tuple<int, string>>.Default.Equals(_tupleOfIntAndString, other._tupleOfIntAndString);
            throw new InvalidOperationException("Inner type is unknown");
        }

        public override string ToString()
        {
            if (_success != null)
                return _success.ToString();
            if (_error != null)
                return _error.ToString();
            if (_iReadOnlyListOfInt != null)
                return _iReadOnlyListOfInt.ToString();
            if (_arrayOfString != null)
                return _arrayOfString.ToString();
            if (_tupleOfIntAndString != null)
                return _tupleOfIntAndString.ToString();
            throw new InvalidOperationException("Inner type is unknown");
        }

        public override bool Equals(object? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != typeof(Result))
            {
                return false;
            }

            return Equals((Result)other);
        }
    }
}