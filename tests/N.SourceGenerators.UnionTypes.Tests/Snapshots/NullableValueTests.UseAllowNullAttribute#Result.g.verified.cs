//HintName: Result.g.cs
// <auto-generated>
//   This code was generated by https://github.com/Ne4to/N.SourceGenerators.UnionTypes
//   Feel free to open an issue
// </auto-generated>
#pragma warning disable
#nullable enable
partial class Result : System.IEquatable<Result>
{
    private readonly int _variantId;
    private const int NullableOfInt32Id = 1;
    private readonly int? _nullableOfInt32;
    public bool IsNullableOfInt32 => _variantId == NullableOfInt32Id;
    public int? AsNullableOfInt32
    {
        get
        {
            if (_variantId == NullableOfInt32Id)
                return _nullableOfInt32;
            throw new System.InvalidOperationException("Inner value is not NullableOfInt32");
        }
    }

    public Result(int? nullableOfInt32)
    {
        _variantId = NullableOfInt32Id;
        _nullableOfInt32 = nullableOfInt32;
    }

    public static implicit operator Result(int? nullableOfInt32) => new Result(nullableOfInt32);
    public static explicit operator int?(Result value)
    {
        if (value._variantId == NullableOfInt32Id)
            return value._nullableOfInt32;
        throw new System.InvalidOperationException("Inner value is not NullableOfInt32");
    }

    public bool TryGetNullableOfInt32(out int? value)
    {
        if (_variantId == NullableOfInt32Id)
        {
            value = _nullableOfInt32;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    private const int StringId = 2;
    private readonly string _string;
    public bool IsString => _variantId == StringId;
    public string AsString
    {
        get
        {
            if (_variantId == StringId)
                return _string;
            throw new System.InvalidOperationException("Inner value is not String");
        }
    }

    public Result(string @string)
    {
        System.ArgumentNullException.ThrowIfNull(@string);
        _variantId = StringId;
        _string = @string;
    }

    public static implicit operator Result(string @string) => new Result(@string);
    public static explicit operator string(Result value)
    {
        if (value._variantId == StringId)
            return value._string;
        throw new System.InvalidOperationException("Inner value is not String");
    }

    public bool TryGetString([System.Diagnostics.CodeAnalysis.NotNullWhen(true)] out string value)
    {
        if (_variantId == StringId)
        {
            value = _string;
            return true;
        }
        else
        {
            value = default;
            return false;
        }
    }

    public TOut Match<TOut>(global::System.Func<int?, TOut> matchNullableOfInt32, global::System.Func<string, TOut> matchString)
    {
        if (_variantId == NullableOfInt32Id)
            return matchNullableOfInt32(_nullableOfInt32);
        if (_variantId == StringId)
            return matchString(_string);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task<TOut> MatchAsync<TOut>(global::System.Func<int?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchNullableOfInt32, global::System.Func<string, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task<TOut>> matchString, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == NullableOfInt32Id)
            return await matchNullableOfInt32(_nullableOfInt32, ct).ConfigureAwait(false);
        if (_variantId == StringId)
            return await matchString(_string, ct).ConfigureAwait(false);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public void Switch(global::System.Action<int?> switchNullableOfInt32, global::System.Action<string> switchString)
    {
        if (_variantId == NullableOfInt32Id)
        {
            switchNullableOfInt32(_nullableOfInt32);
            return;
        }

        if (_variantId == StringId)
        {
            switchString(_string);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public async global::System.Threading.Tasks.Task SwitchAsync(global::System.Func<int?, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchNullableOfInt32, global::System.Func<string, global::System.Threading.CancellationToken, global::System.Threading.Tasks.Task> switchString, global::System.Threading.CancellationToken ct)
    {
        if (_variantId == NullableOfInt32Id)
        {
            await switchNullableOfInt32(_nullableOfInt32, ct).ConfigureAwait(false);
            return;
        }

        if (_variantId == StringId)
        {
            await switchString(_string, ct).ConfigureAwait(false);
            return;
        }

        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public global::System.Type ValueType
    {
        get
        {
            if (_variantId == NullableOfInt32Id)
                return typeof(int?);
            if (_variantId == StringId)
                return typeof(string);
            throw new System.InvalidOperationException("Inner type is unknown");
        }
    }

    public override int GetHashCode()
    {
        if (_variantId == NullableOfInt32Id)
            return _nullableOfInt32.GetHashCode();
        if (_variantId == StringId)
            return _string.GetHashCode();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public static bool operator ==(Result? left, Result? right)
    {
        return Equals(left, right);
    }

    public static bool operator !=(Result? left, Result? right)
    {
        return !Equals(left, right);
    }

    public bool Equals(Result? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (ValueType != other.ValueType)
        {
            return false;
        }

        if (_variantId == NullableOfInt32Id)
            return System.Collections.Generic.EqualityComparer<int?>.Default.Equals(_nullableOfInt32, other._nullableOfInt32);
        if (_variantId == StringId)
            return System.Collections.Generic.EqualityComparer<string>.Default.Equals(_string, other._string);
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override string ToString()
    {
        if (_variantId == NullableOfInt32Id)
            return _nullableOfInt32.ToString();
        if (_variantId == StringId)
            return _string.ToString();
        throw new System.InvalidOperationException("Inner type is unknown");
    }

    public override bool Equals(object? other)
    {
        if (ReferenceEquals(null, other))
        {
            return false;
        }

        if (ReferenceEquals(this, other))
        {
            return true;
        }

        if (other.GetType() != typeof(Result))
        {
            return false;
        }

        return Equals((Result)other);
    }
}