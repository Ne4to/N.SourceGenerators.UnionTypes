using System.Text;

using Microsoft.CodeAnalysis.Text;

namespace N.SourceGenerators.UnionTypes;

public partial class UnionTypesGenerator
{
    private const string UnionTypeAttributeName = "N.SourceGenerators.UnionTypes.UnionTypeAttribute";
    private const string GenericUnionTypeAttributeName = "N.SourceGenerators.UnionTypes.GenericUnionTypeAttribute";
    private const string JsonPolymorphicUnionAttributeName = "N.SourceGenerators.UnionTypes.JsonPolymorphicUnionAttribute";
    private const string UnionConverterFromAttributeName = "N.SourceGenerators.UnionTypes.UnionConverterFromAttribute";
    private const string UnionConverterToAttributeName = "N.SourceGenerators.UnionTypes.UnionConverterToAttribute";
    private const string UnionConverterAttributeName = "N.SourceGenerators.UnionTypes.UnionConverterAttribute";

    private const string UnionTypeAttributeText = $$"""
        {{AutoGeneratedComment}}
        #if NETCOREAPP3_1_OR_GREATER
        #nullable enable
        #endif
        using System;
        using System.Runtime.CompilerServices;
        
        namespace N.SourceGenerators.UnionTypes
        {
            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = true)]
            internal sealed class UnionTypeAttribute : Attribute
            {
                public Type Type { get; }
        #if NETCOREAPP3_1_OR_GREATER
                public string? Alias { get; }
        #else
                public string Alias { get; }
        #endif
                public int Order { get; }
                public bool AllowNull { get; set; }
        #if NETCOREAPP3_1_OR_GREATER
                public object? TypeDiscriminator { get; set; }
        #else
                public object TypeDiscriminator { get; set; }
        #endif
        
        #if NETCOREAPP3_1_OR_GREATER
                public UnionTypeAttribute(Type type, string? alias = null, [CallerLineNumber] int order = 0)
        #else
                public UnionTypeAttribute(Type type, string alias = null, [CallerLineNumber] int order = 0)
        #endif
                {
                    Type = type;
                    Alias = alias;
                    Order = order;
                }
            }
        }
        """;
    
    private const string GenericUnionTypeAttributeText = $$"""
        {{AutoGeneratedComment}}
        #if NETCOREAPP3_1_OR_GREATER
        #nullable enable
        #endif
        using System;
        using System.Runtime.CompilerServices;
        
        namespace N.SourceGenerators.UnionTypes
        {
            [AttributeUsage(AttributeTargets.GenericParameter, Inherited = false, AllowMultiple = false)]
            internal sealed class GenericUnionTypeAttribute : Attribute
            {
        #if NETCOREAPP3_1_OR_GREATER
                public string? Alias { get; set; }
                public bool AllowNull { get; set; }
                public object? TypeDiscriminator { get; set; }
        #else
                public string Alias { get; set; }
                public bool AllowNull { get; set; }
                public object TypeDiscriminator { get; set; }
        #endif
            }
        }
        """;
    
    private const string JsonPolymorphicUnionAttributeText = $$"""
        {{AutoGeneratedComment}}
        #if NETCOREAPP3_1_OR_GREATER
        #nullable enable
        #endif
        using System;
        using System.Runtime.CompilerServices;
        
        namespace N.SourceGenerators.UnionTypes
        {
            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
            internal sealed class JsonPolymorphicUnionAttribute : Attribute
            {
        #if NETCOREAPP3_1_OR_GREATER
                public string? TypeDiscriminatorPropertyName { get; set; }
        #else
                public string TypeDiscriminatorPropertyName { get; set; }
        #endif    
            }
        }
        """;
    
    private const string UnionConverterFromAttributeText = $$"""
        {{AutoGeneratedComment}}
        #if NETCOREAPP3_1_OR_GREATER
        #nullable enable
        #endif
        using System;
        using System.Runtime.CompilerServices;
        
        namespace N.SourceGenerators.UnionTypes
        {
            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = true)]
            sealed class UnionConverterFromAttribute : Attribute
            {
                public Type FromType { get; }

                public UnionConverterFromAttribute(Type fromType)
                {
                    FromType = fromType;
                }
            }
        }
        """;
    
    private const string UnionConverterToAttributeText = $$"""
        {{AutoGeneratedComment}}
        #if NETCOREAPP3_1_OR_GREATER
        #nullable enable
        #endif
        using System;
        using System.Runtime.CompilerServices;
        
        namespace N.SourceGenerators.UnionTypes
        {
            [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = true)]
            sealed class UnionConverterToAttribute : Attribute
            {
                public Type ToType { get; }

                public UnionConverterToAttribute(Type toType)
                {
                    ToType = toType;
                }
            }
        }
        """;
        
    private const string UnionConverterAttributeText = """
        #if NETCOREAPP3_1_OR_GREATER
        #nullable enable
        #endif
        using System;
        using System.Runtime.CompilerServices;
        
        namespace N.SourceGenerators.UnionTypes
        {
            [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = true)]
            sealed class UnionConverterAttribute : Attribute
            {
                public Type FromType { get; }
                public Type ToType { get; }
        #if NETCOREAPP3_1_OR_GREATER
                public string? MethodName { get; }
        #else
                public string MethodName { get; }
        #endif        

        #if NETCOREAPP3_1_OR_GREATER
                public UnionConverterAttribute(Type fromType, Type toType, string? methodName = null)
        #else
                public UnionConverterAttribute(Type fromType, Type toType, string methodName = null)
        #endif
                {
                    FromType = fromType;
                    ToType = toType;
                    MethodName = methodName;
                }
            }
        }
        """;

    private static void AddAttributesSource(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx =>
        {
            ctx.AddSource("UnionTypeAttribute.g.cs", SourceText.From(UnionTypeAttributeText, Encoding.UTF8));
            ctx.AddSource("GenericUnionTypeAttribute.g.cs", SourceText.From(GenericUnionTypeAttributeText, Encoding.UTF8));
            ctx.AddSource("JsonPolymorphicUnionAttribute.g.cs", SourceText.From(JsonPolymorphicUnionAttributeText, Encoding.UTF8));
            ctx.AddSource("UnionConverterFromAttribute.g.cs", SourceText.From(UnionConverterFromAttributeText, Encoding.UTF8));
            ctx.AddSource("UnionConverterToAttribute.g.cs", SourceText.From(UnionConverterToAttributeText, Encoding.UTF8));
            ctx.AddSource("UnionConverterAttribute.g.cs", SourceText.From(UnionConverterAttributeText, Encoding.UTF8));
        });
    }
}